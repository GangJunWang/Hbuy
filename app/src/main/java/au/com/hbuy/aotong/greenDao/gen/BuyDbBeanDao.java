package au.com.hbuy.aotong.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import au.com.hbuy.aotong.greenDao.BuyDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUY_DB_BEAN".
*/
public class BuyDbBeanDao extends AbstractDao<BuyDbBean, Long> {

    public static final String TABLENAME = "BUY_DB_BEAN";

    /**
     * Properties of entity BuyDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Link = new Property(2, String.class, "link", false, "LINK");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Num = new Property(4, String.class, "num", false, "NUM");
        public final static Property Size = new Property(5, String.class, "size", false, "SIZE");
        public final static Property Mk = new Property(6, String.class, "mk", false, "MK");
    };


    public BuyDbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BuyDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUY_DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"LINK\" TEXT," + // 2: link
                "\"TITLE\" TEXT," + // 3: title
                "\"NUM\" TEXT," + // 4: num
                "\"SIZE\" TEXT," + // 5: size
                "\"MK\" TEXT);"); // 6: mk
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUY_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BuyDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
 
        String mk = entity.getMk();
        if (mk != null) {
            stmt.bindString(7, mk);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BuyDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
 
        String mk = entity.getMk();
        if (mk != null) {
            stmt.bindString(7, mk);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BuyDbBean readEntity(Cursor cursor, int offset) {
        BuyDbBean entity = new BuyDbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mk
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BuyDbBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMk(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BuyDbBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BuyDbBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
